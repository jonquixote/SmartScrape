name: SmartScrape CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest -xvs tests/ --cov=. --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
  
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy
      
      - name: Run flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run black
        run: black --check .
  
  build:
    name: Build Docker Image
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_env != ''
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            smartscrape/app:latest
            smartscrape/app:${{ github.sha }}
          cache-from: type=registry,ref=smartscrape/app:buildcache
          cache-to: type=registry,ref=smartscrape/app:buildcache,mode=max
  
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_env == 'staging'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.STAGING_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.STAGING_KNOWN_HOSTS }}
      
      - name: Deploy to Staging
        run: |
          ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} "
            cd /opt/smartscrape &&
            docker-compose pull &&
            docker-compose up -d &&
            docker system prune -af
          "
  
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_env == 'production'
    environment:
      name: production
      url: https://smartscrape.example.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.PRODUCTION_KNOWN_HOSTS }}
      
      - name: Deploy to Production
        run: |
          ssh ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SSH_HOST }} "
            cd /opt/smartscrape &&
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull &&
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d &&
            docker system prune -af
          "
      
      - name: Notify Deployment
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: Production Deployment
          SLACK_MESSAGE: 'SmartScrape has been deployed to production :rocket:'
          SLACK_COLOR: '#36a64f'
